apply plugin: 'java-library'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    jcenter()
}

dependencies {

    // https://mvnrepository.com/artifact/org.swinglabs/swingx
    compile group: 'org.swinglabs', name: 'swingx', version: '1.6.1'

    compile group: 'com.github.jiconfont', name: 'jiconfont-bundle', version: '1.4.0'

    implementation 'com.github.jiconfont:jiconfont-swing:1.0.1'

    implementation 'com.github.jiconfont:jiconfont-google_material_design_icons:2.2.0.2'

    //Slf4j configuration
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'ch.qos.logback:logback-core:1.2.3'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
    //assertj
    testCompile group: 'org.assertj', name: 'assertj-swing-junit', version: '3.9.2'
    //testCompile group: 'org.swinglabs', name: 'swingx', version: '1.6.1'

}

version = VERSION

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:deprecation"
        }
    }
}

jar {
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

/*
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}


artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name archivesBaseName
                packaging 'jar'
                // optionally artifactId can be defined here
                print('Archive base name: ' + archivesBaseName)
                groupId GROUP_ID
                artifactId ARCHTFAT_ID
                version VERSION
                description archivesBaseName
                url 'https://github.com/vincenzopalazzo/material-ui-swing'

                scm {
                    connection 'scm:svn:http://foo.googlecode.com/svn/trunk/'
                    developerConnection 'scm:svn:https://foo.googlecode.com/svn/trunk/'
                    url 'http://foo.googlecode.com/svn/trunk/'
                }

                licenses {
                    license {
                        name 'MIT'
                        url 'https://github.com/vincenzopalazzo/material-ui-swing/blob/masternow/LICENSE'
                    }
                }

                developers {
                    developer {
                        id 'vincenzopalazzo'
                        name 'Vincenzo Palazzo'
                        email 'vincenzopalazzodev@gmail.com'
                    }
                }
            }
        }
    }
}
*/
task deployOnDiffereProjectJMars {
    doLast {
        copy {
            println 'init task copy source file'
            from 'build/libs/' + project.name + '-' + version + ".jar"
            into '/media/vincent/VincentHDD/JMARS_Developement/17_03_2020_JMars_Refactoring/UI/lib'
            rename(project.name + '-' + version + ".jar", 'material-ui-swing-1.1.1.jar')
        }
    }
}

task deployOnDiffereProjectLocalLib {
    doLast {
        copy {
            println 'init task copy source file'
            from 'build/libs/' + project.name + ".jar"
            into '/media/vincent/vincenzodev/home-pc/myLocalLib/java'
            rename(project.name + ".jar", 'material-ui-swing-' + version + ".jar")
        }
    }
}

task copyIntoLibsDir {
    doLast {
        copy {
            println 'init task copy source file'
            from 'build/libs/' + project.name + "-" + version + ".jar"
            into 'libs/'
            //rename(project.name + ".jar", 'material-ui-swing-' + version + ".jar")
        }
    }
}

task createPom {
    pom {
        project {
            groupId GROUP_ID
            artifactId ARCHTFAT_ID
            version VERSION

            inceptionYear '2020'
            licenses {
                license {
                    name 'MIT'
                    url 'https://github.com/vincenzopalazzo/material-ui-swing/blob/masternow/LICENSE'
                    distribution 'repo'
                }
            }
        }
    }.writeTo("pom.xml")
}
